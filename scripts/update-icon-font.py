#!/usr/bin/env python

import argparse
import os

from base64 import b64encode
from zipfile import ZipFile

def main():
    parser = argparse.ArgumentParser('Update the icomoon icon font from the provided archive')
    parser.add_argument('archive', help='Path to .zip file generated by icomoon')
    args = parser.parse_args()

    script_dir = os.path.dirname(os.path.abspath(__file__))
    vendor_style_dir = script_dir + '/../h/static/styles/vendor'

    icon_font_archive = ZipFile(args.archive)
    icon_font_archive.extract('selection.json', vendor_style_dir + '/fonts')
    icon_font_archive.extract('fonts/h.woff', vendor_style_dir)
    css_input_file = icon_font_archive.open('style.css')

    css_output_file = open(vendor_style_dir + '/icomoon.css', 'w')

    for line in css_input_file:
        if "format('woff')" in line:
            # inline the WOFF format file
            woff_content = icon_font_archive.open('fonts/h.woff').read()
            woff_src_line = """
    /* WARNING - the URL below is inlined
     * because the CSS asset pipeline is not correctly rebasing
     * URLs when concatenating files together.
     *
     * See issue #2571
     */
    src:url('data:application/font-woff;base64,%s') format('woff');
"""
            css_output_file.write(woff_src_line % b64encode(woff_content))
        elif "url(" in line:
            # skip non-WOFF format fonts
            pass
        else:
            css_output_file.write(line)


if __name__ == '__main__':
    main()
