// Generated by CoffeeScript 1.6.3
/*
** Annotator 1.2.6-dev-7dcfe84
** https://github.com/okfn/annotator/
**
** Copyright 2012 Aron Carroll, Rufus Pollock, and Nick Stenning.
** Dual licensed under the MIT and GPLv3 licenses.
** https://github.com/okfn/annotator/blob/master/LICENSE
**
** Built at: 2013-11-22 15:02:36Z
*/



/*
//
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var TextRangeAnchor, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  TextRangeAnchor = (function(_super) {
    __extends(TextRangeAnchor, _super);

    TextRangeAnchor.Annotator = Annotator;

    function TextRangeAnchor(annotator, annotation, target, range, quote) {
      this.range = range;
      TextRangeAnchor.__super__.constructor.call(this, annotator, annotation, target, 0, 0, quote);
      if (this.range == null) {
        throw "range is required!";
      }
      this.Annotator = TextRangeAnchor.Annotator;
    }

    TextRangeAnchor.prototype._createHighlight = function() {
      return new this.Annotator.TextHighlight(this, 0, this.range);
    };

    return TextRangeAnchor;

  })(Annotator.Anchor);

  Annotator.Plugin.OldTextAnchors = (function(_super) {
    __extends(OldTextAnchors, _super);

    function OldTextAnchors() {
      this.createFromRangeSelector = __bind(this.createFromRangeSelector, this);
      this.checkForEndSelection = __bind(this.checkForEndSelection, this);
      _ref = OldTextAnchors.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    OldTextAnchors.prototype.pluginInit = function() {
      var _ref1;
      if (!this.annotator.plugins.TextHighlights) {
        throw "The TextAnchors Annotator plugin requires the TextHighlights plugin.";
      }
      if (this.annotator.plugins.TextAnchors) {
        throw "The TextAnchors Annotator plugin conflicts with the OldTextAnchors plugin.";
      }
      this.Annotator = Annotator;
      this.$ = Annotator.$;
      this.annotator.anchoringStrategies.push({
        name: "range",
        code: this.createFromRangeSelector
      });
      $(this.annotator.wrapper).bind({
        "mouseup": this.checkForEndSelection
      });
      this.annotator.TextRangeAnchor = TextRangeAnchor;
      this.verifyQuote = (_ref1 = this.options.verifyQuote) != null ? _ref1 : true;
      return null;
    };

    OldTextAnchors.prototype._getSelectedRanges = function() {
      var browserRange, i, normedRange, r, ranges, rangesToIgnore, selection, _i, _len;
      selection = this.Annotator.util.getGlobal().getSelection();
      ranges = [];
      rangesToIgnore = [];
      if (!selection.isCollapsed) {
        ranges = (function() {
          var _i, _ref1, _results;
          _results = [];
          for (i = _i = 0, _ref1 = selection.rangeCount; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
            r = selection.getRangeAt(i);
            browserRange = new this.Annotator.Range.BrowserRange(r);
            normedRange = browserRange.normalize().limit(this.annotator.wrapper[0]);
            if (normedRange === null) {
              rangesToIgnore.push(r);
            }
            _results.push(normedRange);
          }
          return _results;
        }).call(this);
        selection.removeAllRanges();
      }
      for (_i = 0, _len = rangesToIgnore.length; _i < _len; _i++) {
        r = rangesToIgnore[_i];
        selection.addRange(r);
      }
      return this.$.grep(ranges, function(range) {
        if (range) {
          selection.addRange(range.toRange());
        }
        return range;
      });
    };

    OldTextAnchors.prototype.checkForEndSelection = function(event) {
      var container, r, range, selectedRanges, _i, _len;
      this.annotator.mouseIsDown = false;
      if (this.annotator.ignoreMouseup) {
        return;
      }
      selectedRanges = this._getSelectedRanges();
      for (_i = 0, _len = selectedRanges.length; _i < _len; _i++) {
        range = selectedRanges[_i];
        container = range.commonAncestor;
        if (this.Annotator.TextHighlight.isInstance(container)) {
          container = this.Annotator.TextHighlight.getIndependentParent(container);
        }
        if (this.annotator.isAnnotator(container)) {
          return;
        }
      }
      if (selectedRanges.length) {
        event.targets = (function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = selectedRanges.length; _j < _len1; _j++) {
            r = selectedRanges[_j];
            _results.push(this.getTargetFromRange(r));
          }
          return _results;
        }).call(this);
        return this.annotator.onSuccessfulSelection(event);
      } else {
        return this.annotator.onFailedSelection(event);
      }
    };

    OldTextAnchors.prototype._getRangeSelector = function(range) {
      var sr;
      sr = range.serialize(this.annotator.wrapper[0]);
      return {
        type: "RangeSelector",
        startContainer: sr.startContainer,
        startOffset: sr.startOffset,
        endContainer: sr.endContainer,
        endOffset: sr.endOffset
      };
    };

    OldTextAnchors.prototype._getTextQuoteSelector = function(range) {
      if (range == null) {
        throw new Error("Called getTextQuoteSelector(range) with null range!");
      }
      return {
        type: "TextQuoteSelector",
        exact: range.text().trim()
      };
    };

    OldTextAnchors.prototype.getTargetFromRange = function(range) {
      return {
        source: this.annotator.getHref(),
        selector: [this._getRangeSelector(range), this._getTextQuoteSelector(range)]
      };
    };

    OldTextAnchors.prototype.getQuoteForTarget = function(target) {
      var selector;
      selector = this.annotator.findSelector(target.selector, "TextQuoteSelector");
      if (selector != null) {
        return this.annotator.normalizeString(selector.exact);
      } else {
        return null;
      }
    };

    OldTextAnchors.prototype.createFromRangeSelector = function(annotation, target) {
      var currentQuote, error, normedRange, savedQuote, selector;
      selector = this.annotator.findSelector(target.selector, "RangeSelector");
      if (selector == null) {
        return null;
      }
      try {
        normedRange = this.Annotator.Range.sniff(selector).normalize(this.annotator.wrapper[0]);
      } catch (_error) {
        error = _error;
        return null;
      }
      currentQuote = this.annotator.normalizeString(normedRange.text().trim());
      if (this.verifyQuote) {
        savedQuote = this.getQuoteForTarget(target);
        if ((savedQuote != null) && currentQuote !== savedQuote) {
          return null;
        }
      }
      return new TextRangeAnchor(this.annotator, annotation, target, normedRange, currentQuote);
    };

    return OldTextAnchors;

  })(Annotator.Plugin);

}).call(this);

//
//@ sourceMappingURL=annotator.oldtextanchors.map